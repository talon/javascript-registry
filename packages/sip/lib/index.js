//@flow
import { src, dest, series, watch } from "gulp"
import documentation from "gulp-documentation"
import modify from "gulp-modify-file"
import prettier from "gulp-prettier"
import toc from "markdown-toc"
import babel from "gulp-babel"
import jest from "gulp-jest"
import flow from "gulp-flowtype"
import check from "depcheck"
import { promisify } from "util"
import { exec } from "child_process"

export function dependencies(pkg /*: string */) {
  // $FlowFixMe
  const name /*: string */ = pkg.split("/").slice(-1)

  return function install() {
    return check(pkg, {
      ignoreDirs: ["dist"]
    })
      .then(data => {
        const missing = Object.keys(data.missing)
        return missing.length > 0
          ? promisify(exec)(
              `yarn workspace @talon/${name} add ${Object.keys(
                data.missing
              ).join(" ")}`
            ).then(() => data)
          : data
      })
      .then(data => {
        const unused = data.dependencies.concat(data.devDependencies)
        return unused.length > 0
          ? promisify(exec)(
              `yarn workspace @talon/${name} remove ${unused.join(" ")}`
            ).then(() => data)
          : data
      })
  }
}

/**
 * Create a README.md for this package by parsing the source code for JSDoc style comments
 *
 * **You should never edit the README**, only lib code. Namaste ðŸ•Š
 */
export function docs(pkg /*: string */) {
  return function README() {
    const meta = require(`${pkg}/package.json`)

    return (
      src(`${pkg}/lib/**`)
        //.pipe(flow())
        .pipe(documentation("md", { filename: "README.md" }))
        .pipe(
          modify(
            content =>
              `<!-- Generated by @talon/sip. Update this documentation by updating the source code. -->\n# ${
                meta.name
              }\n>${
                meta.description
              }\n\n**Table of Contents**\n<!-- toc -->\n${content.substring(
                content.indexOf("\n") + 2
              )}`
          )
        )
        .pipe(modify(content => toc.insert(content, { maxdepth: 2 })))
        .pipe(prettier())
        .pipe(dest(pkg), { overwrite: true })
    )
  }
}

/**
 * With [@talon/lit](https://github.com/talon/javascript-registry/packages/92916) **you can test your README!**
 *
 * just add a js code block in your JSDoc comments ðŸ˜Ž
 *
 * ```js
 * describe("readme driven development", () => {
 *   it("is lit! ðŸ”¥", () => expect(true).toBeTruthy())
 * })
 * ```
 */
export function test(pkg /*: string */) {
  return series(dependencies(pkg), docs(pkg), function tests() {
    process.env.NODE_ENV = "test"
    return src(`${pkg}`).pipe(
      jest({
        testRegex: new RegExp(
          `${pkg}\/(README.md|.+\.(usage|test)\.([jt]sx?|md))`
        )
      })
    )
  })
}

/**
 * You probably want the docs and tests to update while you're in the thick of it
 */
export const develop = (pkg /*: string */) =>
  series(test(pkg), function watchPkg() {
    watch(`${pkg}/lib/**`, test(pkg))
  })

/**
 * Run prettier on everything, don't think about style
 */
export const format = (pkg /*: string */) => () =>
  src([`${pkg}/**`, `!${pkg}/node_modules/**`])
    .pipe(prettier())
    .pipe(dest(pkg))

/**
 * Babel it all up and stuff it into a distribution folder
 */
export const compile = (pkg /*: string */) =>
  function compileLib() {
    return src(`${pkg}/lib/**`)
      .pipe(babel())
      .pipe(dest(`${pkg}/dist`, { overwrite: true }))
  }

/**
 * All of this together into one task, excellent for CI environments!
 *
 * A bunch of sips === a gulp
 */
export const build = (pkg /*: string */) =>
  series(test(pkg), format(pkg), compile(pkg))

/**
 * This initializes the Sip Suite with a package root. With Lerna you can use it like this
 *
 * ```
 * Object.assign(exports, Sip.tasks(process.env.LERNA_PACKAGE_NAME ? `${__dirname}/packages/${process.env.LERNA_PACKAGE_NAME.split("/").slice(-1)}` : false))
 * ```
 *
 * or for non-monorepo projects like this
 *
 * ```
 * Object.assign(exports, Sip.tasks(__dirname))
 * ```
 */
export const tasks = (pkg /*: string */) =>
  pkg
    ? {
        dependencies: dependencies(pkg),
        docs: docs(pkg),
        format: format(pkg),
        test: test(pkg),
        compile: compile(pkg),
        build: build(pkg),
        develop: develop(pkg)
      }
    : {}
