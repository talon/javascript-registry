import { src, dest, series, watch } from "gulp"
import documentation from "gulp-documentation"
import modify from "gulp-modify-file"
import prettier from "gulp-prettier"
import toc from "markdown-toc"
import babel from "gulp-babel"
import jest from "gulp-jest"

export const docs = pkg => () => {
    const meta = require(`${pkg}/package.json`)

    return src(`${pkg}/lib/**/*`)
        .pipe(documentation("md", { filename: "README.md" }))
        .pipe(
            modify(
                content =>
                    `<!-- Generated by @talon/gulp. Update this documentation by updating the source code. -->\n# ${
                    `[${meta.name}](${meta.homepage})`
                    }\n>${
                    meta.description
                    }\n\n**Table of Contents**\n<!-- toc -->\n${content.substring(
                        content.indexOf("\n") + 2
                    )}`
            )
        )
        .pipe(modify(content => toc.insert(content, { maxdepth: 2 })))
        .pipe(prettier())
        .pipe(dest(pkg), { overwrite: true })
}

export const format = pkg => () =>
    src(`${pkg}/**/*`)
        .pipe(prettier())
        .pipe(dest(pkg))

export const test = pkg => series(docs(pkg), () => {
    process.env.NODE_ENV = "test"
    return src(`${pkg}/(README.md|**/*.(usage|test).(js|md))`).pipe(jest())
})

export const compile = (pkg, dir = "./dist") => () =>
    src(`${pkg}/lib/**/*`)
        .pipe(babel())
        .pipe(dest(dir, { overwrite: true }))

export const develop = pkg => series(test(pkg), () =>
    watch(pkg, test(pkg))
)
export const build = pkg => series(test(pkg), format(pkg), compile(pkg))