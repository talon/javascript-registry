const { src, dest, series, watch } = require("gulp")
const babel = require("gulp-babel")
const prettier = require("gulp-prettier")
const documentation = require("gulp-documentation")
const modify = require("gulp-modify-file")
const toc = require("markdown-toc")
const jest = require("gulp-jest").default

const PACKAGE = `./packages/${process.env.LERNA_PACKAGE_NAME.split("/").slice(-1)}`
const ALL_FILES = [`${PACKAGE}/**`, `!${PACKAGE}/node_modules/**`]
const LIBRARY_FILES = `${PACKAGE}/lib/**`
const DISTRIBUTION_FOLDER = `${PACKAGE}/dist`

const meta = require(`${PACKAGE}/package.json`)

const docs = (exports.docs = () =>
  src(LIBRARY_FILES)
    .pipe(documentation("md", { filename: "README.md" }))
    .pipe(
      modify(
        content =>
          `<!-- Generated by npm run docs. Update this documentation by updating the source code. -->\n# ${
          meta.name
          }\n>${
          meta.description
          }\n\n**Table of Contents**\n<!-- toc -->\n${content.substring(
            content.indexOf("\n") + 2
          )}`
      )
    )
    .pipe(modify(content => toc.insert(content, { maxdepth: 2 })))
    .pipe(prettier())
    .pipe(dest(PACKAGE), { overwrite: true }))

const format = (exports.format = () =>
  src(ALL_FILES)
    .pipe(prettier())
    .pipe(dest(PACKAGE)))

const test = (exports.test = series(docs, tests))

const compile = (exports.compile = () =>
  src(LIBRARY_FILES)
    .pipe(babel())
    .pipe(dest(DISTRIBUTION_FOLDER, { overwrite: true })))

exports.develop = series(test, () =>
  watch(LIBRARY_FILES, series(test))
)
exports.distribute = series(test, format, compile)

function tests() {
  process.env.NODE_ENV = "test"
  return src(PACKAGE).pipe(jest())
}
